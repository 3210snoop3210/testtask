stages:
  - deploy

image: docker:latest

services:
  - docker:dind

variables:
  TERRAFORM_VERSION: "1.5.3"  # Update to the latest version if necessary
  DOCKER_COMPOSE_VERSION: "2.3.3"
  AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
  AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
  DOCKER_USERNAME: "$DOCKER_USERNAME"
  DOCKER_PASSWORD: "$DOCKER_PASSWORD"

before_script:
  - apk add --no-cache curl bash jq
  - >
    curl -Lo /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    && unzip /tmp/terraform.zip -d /usr/local/bin
  - chmod +x /usr/local/bin/terraform
  - terraform version
  - mkdir -p ~/.ssh
  - echo "$AWS_SSH_KEY" > ~/.ssh/docker-compose3.pem
  - chmod 600 ~/.ssh/docker-compose3.pem
  - echo "$AWS_SSH_KEY"
deploy:
  stage: deploy
  script:
    - |
      set -euo pipefail
      # Initialize Terraform
      ls -al
      export TF_VAR_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      export TF_VAR_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      export TF_VAR_DOCKER_USERNAME=$DOCKER_USERNAME
      export TF_VAR_DOCKER_PASSWORD=$DOCKER_PASSWORD

      terraform init -backend-config="bucket=123terrabucket123" -backend-config="key=terraform.tfstate" -backend-config="region=eu-central-1"

      # Destroy old instance and security groups if they exist
      terraform destroy --auto-approve

      # Apply new configuration
      terraform plan

      terraform apply -auto-approve
      sleep 200
      terraform init -backend-config="bucket=123terrabucket123" -backend-config="key=terraform.tfstate" -backend-config="region=eu-central-1"
      terraform destroy --auto-approve
